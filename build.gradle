import com.uber.nanoscope.build.IncrementType
import com.uber.nanoscope.build.Nanoscope

buildscript {
    ext.kotlin_version = '1.1.50'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = "com.uber.nanoscope.MainKt"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.squareup.moshi:moshi-kotlin:1.5.0"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task('deployRelease', dependsOn: distZip) {
    doLast {
        if (!project.hasProperty("increment")) {
            throw new InvalidUserDataException("Must supply an increment type: -Pincrement=[major|minor|patch]")
        }
        try {
            def incrementType = IncrementType.valueOf(project.increment.toUpperCase())
            Nanoscope.release(project.tasks.distZip.archivePath, incrementType)
        } catch (IllegalArgumentException ignore) {
            throw new InvalidUserDataException("Invalid increment type: ${project.increment}. Must be one of [major|minor|patch].")
        }
    }
}

task('deleteReleaseDrafts') {
    doLast {
        Nanoscope.deleteReleaseDrafts()
    }
}

applicationDistribution.from("wrapper/nanoscopew") {
    into("bin")
    fileMode = 0755
}

[installDist, distZip].forEach { task ->
    task.rename("^nanoscope\$", "_nanoscope")
    task.rename("^nanoscopew\$", "nanoscope")
}

applicationDefaultJvmArgs = ["-Xmx8g"]